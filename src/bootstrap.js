/* eslint no-mixed-operators:0, no-plusplus:0 */

import _log             from './log.js';

/**
 * Interface of runtime framework
 */

const self = module.exports = {
///////////////////////////////////////////////////////////////////////////////
    /**
     * selector : wrapper of selector
     * @param  string selected select condition
     * @return object          selected objects
     */
    selector : function(selected, all) {
        if (all) {
            return window.document.querySelectorAll(selected);
        }
        return window.document.querySelector(selected);
    },

    /**
     * get_page_id : get current page id
     * @return string current page id
     */
    get_page_id : function() {
        return window.document.body.getAttribute('page_id');
    },

    /**
     * get_page_data : get current page data
     * @param  string pageId  current page id
     * @return mixed  current page data
     */
    get_page_data : function(pageId) {
        // for develop only
        if (_log.is_debug()) {
            return _crm.data && _crm.data.Wechat_svc_login ? _crm.data.Wechat_svc_login : {};
        }

        const pid = pageId || self.get_page_id();
        return typeof self.data === 'object' && self.data[pid] ? self.data[pid] : {};
    },

    /**
     * acl_allow : check current module is allowed or not
     * @param  {module} after_load  the callback after load
     * @return boolean
     */
    acl_allow : function(module) {
        const page_data = self.get_page_data();
        if (page_data && page_data.user_info && page_data.user_info.modules) {
            const modules = page_data.user_info.modules;
            for (let i = 0; i < modules.length; i++) {
                if (modules[i] === module) {
                    return true;
                }
            }
            return false;
        }
        return false;
    },

    authed_user : function() {
        // avoid to check user role
        if (!_crm.get_config('check_user_role')) {
            return true;
        }

        const page_data = self.get_page_data() || {};
        const user_info = page_data.user_info || {};
        if (user_info.role_id
            && user_info.login_id
            && (user_info.role_id.toString() === '10'
                || user_info.role_id.toString() === '20')
        ) {
            return true;
        }
        return false;
    },

    /**
     * get_new_guid : get new guid by client
     * @return {String}  retrieved guid
     */
    get_new_guid : function(sep) {
        // RFC 4122
        //
        // A UUID is 128 bits long
        //
        // String representation is five fields of 4, 2, 2, 2, and 6 bytes.
        // Fields represented as lowercase, zero-filled, hexadecimal strings, and
        // are separated by dash characters
        //
        // A version 4 UUID is generated by setting all but six bits to randomly
        // chosen values
        return [
            Math.random().toString(16).slice(2, 10),
            Math.random().toString(16).slice(2, 6),

            // Set the four most significant bits (bits 12 through 15) of the
            // time_hi_and_version field to the 4-bit version number from Section
            // 4.1.3
            (Math.random() * 0.0625 /* 0x.1 */ + 0.25 /* 0x.4 */).toString(16).slice(2, 6),

            // Set the two most significant bits (bits 6 and 7) of the
            // clock_seq_hi_and_reserved to zero and one, respectively
            (Math.random() * 0.25 /* 0x.4 */ + 0.5 /* 0x.8 */).toString(16).slice(2, 6),

            Math.random().toString(16).slice(2, 14)
        ].join(sep || '');
    },

    get_time : function() {
        if (window.performance && window.performance.now) {
            return window.performance.now();
        }
        return Date.now();
    }

///////////////////////////////////////////////////////////////////////////////
};
